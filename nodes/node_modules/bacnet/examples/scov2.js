// Wrapper for Subscribed-COV
const deviceAddress = process.argv[2]
const deviceID = process.argv[3]

// Cov Data format
const subscriberProcessIdentifier = process.argv[4] // uint_32

// add BACNET_OBJECT_ID monitoredObjectId
const type = process.argv[5] // uint16_t
const instance = process.argv[6] // uint32_t

const cancellationRequest = process.argv[7] // bool
const issueConfirmedNotifications = process.argv[8] // bool (optional)
const lifetime = process.argv[9] // uint_32 (optional)

// BACNET_PROPERTY_REFERENCE monitoredProperty
const propertyIdentifier = process.argv[10] // uint_32
const propertyArrayIndex = process.argv[11] // uint_32 (optional)
// BACNET_APPLICATION_DATA_VALUE * value
const contextSpecific = process.argv[12] // bool (true if context specific data)
const contextTag = process.argv[13] // uint8_t (only used for context specific data)
const tag = process.argv[14] // uint8_t  (application tag data type)

const errorClass1 = process.argv[15] // int_32 (BACNET_ERROR_CLASS)
const errorCode1 = process.argv[16] // int_32 (BACNET_ERROR_CODE)

const covIncrementPresent = process.argv[17] // bool
const covIncrement = process.argv[15] // float (optional)
const errorClass = process.argv[16] // int_32 (BACNET_ERROR_CLASS)
const errorCode = process.argv[17] // int_32 (BACNET_ERROR_CODE)

var value = {contextSpecific: contextSpecific, contextTag: contextTag, tag: tag}

var monitoredObjectId = {type: type, instance: instance}

var monitoredProperty = {propertyIdentifier: propertyIdentifier, propertyArrayIndex: propertyArrayIndex, value: value, errorClass: errorClass1, errorCode: errorCode1}

var covData = {subscriberProcessIdentifier: subscriberProcessIdentifier, monitoredObjectId: monitoredObjectId, cancellationRequest: cancellationRequest, issueConfirmedNotifications: issueConfirmedNotifications, lifetime: lifetime, monitoredProperty: monitoredProperty, covIncrementPresent: covIncrementPresent, covIncrement: covIncrement, errorClass: errorClass, errorCode: errorCode}

const bacnet = require('../bacnet.js')
const r = bacnet.init({
  datalink: {
    iface: process.env.BACNET_INTERFACE,
    ip_port: process.env.BACNET_PORT || 0xBAC0
  },
  device: false
})

console.log('\n wrapper:\n', covData, '\n')

r.subscribeCov(deviceAddress, deviceID, covData)

setTimeout(function () {}, 1000)
